generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Blog {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  slug            String      @unique
  body            String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  authorId        String
  metaDescription String
  thumbnail       Thumbnail   @relation(fields: [thumbnailId], references: [id])
  thumbnailId     String      @unique @db.ObjectId
  images          BlogImage[]
}

model Thumbnail {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  publicId String?
  url      String
  Blog     Blog?
}

model BlogImage {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  publicId String?
  url      String
  Blog     Blog?   @relation(fields: [blogId], references: [id])
  blogId   String? @db.ObjectId
}

model CommitteeMembers {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  position String
  contact  String[]
  avatar   avatar   @relation(fields: [avatarId], references: [id])
  avatarId String   @unique @db.ObjectId
}

model avatar {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  publicId         String?
  url              String
  CommitteeMembers CommitteeMembers?
}

model Notice {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String          @unique
  body        String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  authorId    String
  thumbnail   NoticeThumbnail @relation(fields: [thumbnailId], references: [id])
  thumbnailId String          @unique @db.ObjectId
  images      NoticeImages[]
}

model NoticeThumbnail {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  publicId String?
  url      String
  Notice   Notice?
}

model NoticeImages {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  publicId String?
  url      String
  Notice   Notice? @relation(fields: [noticeId], references: [id])
  noticeId String? @db.ObjectId
}

model Events {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String          @unique
  body        String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  authorId    String
  thumbnail   EventsThumbnail @relation(fields: [thumbnailId], references: [id])
  thumbnailId String          @unique @db.ObjectId
  images      EventsImages[]
}

model EventsThumbnail {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  publicId String?
  url      String
  Events   Events?
}

model EventsImages {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  publicId String?
  url      String
  Events   Events? @relation(fields: [eventsId], references: [id])
  eventsId String? @db.ObjectId
}
